package de.telran.homeWork.hw_26.cats;

public class Main {
    //    Все задания про кошек связаны между собой и их следует выполнить в одном проекте.
    public static void main(String[] args) {
        /*
    Урок 1. Понятие класса и объекта.
Создать 5-7 кошек и вызвать у них различные методы:
напечатайте в консоль вес созданных кошек покормите 2 кошки и после этого
распечатать их вес (убедитесь что вес изменился)
перекормите кошку
"замяукайте" кошку до смерти
Рекомендации: для достижения “перекорма” и “замяукивания” кошки возможно использовать цикл
с условием проверки статуса кошки, чтобы лишнего не мяукать и не кормить
*/
        Cat cat1 = new Cat("Барсик", 3, 1, ColorCoat.BLACK, 0.8, 16);
        Cat cat2 = new Cat("Мурка", 4, 2, ColorCoat.WHITE, 0.5, 20);
        Cat cat3 = new Cat("Лёпа", 6, 2, ColorCoat.GREY, 0.7, 18);
        Cat cat4 = new Cat("Рыжик", 2, 2, ColorCoat.RED, 0.3, 21);
        Cat cat5 = new Cat("Тишка", 8, 2, ColorCoat.GREY, 1, 22);


        System.out.println(cat1);
        System.out.println(cat2);

        // Закармливаем!!
        for (int i = 0; i < 8; i++) {
            cat1.feedCat(3000);
        }
        System.out.println(cat1);

        // Замяукиваем!!
        for (int i = 0; i < 6; i++) {
            cat2.sayMeow();
        }

        System.out.println(cat2);



/*Урок 2. Метод, параметры, return.
Создать в классе Cat метод, который будет возвращать сумму съеденной еды текущей кошки.
Создать в классе Cat метод “сходить в туалет” pee(), который будет уменьшать вес кошки и что-нибудь печатать.
Рекомендации: протестируйте верную работу метода возврата съеденной еды:
создайте кошку
покормите кошку кормом весом 150.00
вызовите метод pee() несколько раз
распечатайте значение съеденного корма, в консоль должно напечататься 150.00
*/
        System.out.println(cat3);
        cat3.feedCat(150);
        cat3.feedCat(150);
        System.out.println(cat3.getName() + " весит: " + cat3.getWeight() + " кг");
        cat3.pee();
        cat3.pee();
        System.out.println("Всего " + cat3.getName() + " съел " + cat3.getFeedSum() + " грамм");
        System.out.println(cat3.getName() + " весит: " + cat3.getWeight() + " кг");

        
/*
Урок 3. Статические методы и переменные.
Создать у класса Cat статическую переменную count, которая будет увеличиваться,
если кошку создали, и убывать, если кошка взорвалась или умерла.
Создать статический метод getCount(), который будет возвращать количество кошек
*Задание c : придумайте способ проверять жива ли кошка или нет на основе значения ее веса,
и используя это запретите кормить, пить, ходить в туалет неживой кошке.
*/

        System.out.println(cat4.getName() + " весит: " + cat4.getWeight() + " кг");

        while (cat4.isLive()) {
            cat4.pee();
        }
        System.out.println(cat4.getName() + " весит: " + cat4.getWeight() + " кг");

        cat4.feedCat(100);
        cat4.sayMeow();
        cat4.pee();

        System.out.println(Cat.getCatsCount());

/*
Урок 4. Константы и Enum.
Создать у кошки константы: “количество глаз”, “минимальный вес” и “максимальный вес”.
Создать enum с окрасами кошек.

*/
        System.out.println(cat4);
        /*
Урок 5. Создание объектов и конструктор.
Создать в классе Cat ещё один конструктор так, чтобы можно было создать кошку с весом переданным в конструктор
Создать в главном классе Loader метод генерации котенка private static Cat getKitten(),
который будет возвращать кошку с весом 1100.00, используя конструктор в который передаем вес кошки.
*/
        Cat kitten = getKitten();
        /*
Урок 6. Инкапсуляция, геттеры и сеттеры.
Создать у кошки переменную в которой хранится окрас, написать геттер и сеттер для окраса.
Рекомендации: имена методов, возвращающие значения полей типа boolean, принято именовать с префиксами is/has. Например:
метод возвращающий результат проверки “Жива ли кошка?” можно назвать isAlive(),
если кошка жива - мы ожидаем возврат значение true метод возвращающий результат проверки “Есть ли у кошки хвост?”
можно назвать hasTail(), если кошка с хвостом - мы ожидаем возврат значение true

*/
        kitten.setColor(ColorCoat.WHITE);
        kitten.setName("Котик");
        System.out.println("Жива ли кошка? " + kitten.isLive());
        System.out.println(kitten);
        /*
Урок 7. Копирование объектов.
Создать у кошки метод создания её “глубокой” копии. Для создания копии кошки
вы можете использовать метод копирования или конструктор копирования.*/

        Cat newCat = cat3.clone();
        System.out.println("Old cat: " + cat3);
        System.out.println("New cat: " + newCat);

        newCat.setName("Луна");
        newCat.setColor(ColorCoat.WHITE);
        newCat.setEyeQuantity(1);
        newCat.feedCat(1500);
        newCat.setLive(false);

        System.out.println("Old cat: " + cat3);
        System.out.println("New cat after change: " + newCat);
    }

    private static Cat getKitten() {
        return new Cat(1.100);
    }
}
